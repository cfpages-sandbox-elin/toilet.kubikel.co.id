name: Insert .head Content v2.2

on:
  push:
    paths:
      - .head  # Trigger when the .head file is modified

permissions:
  contents: write

jobs:
  update_html_files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if .head file exists
        id: check_head
        run: if [[ -f .head ]]; then echo "exists=true" >> $GITHUB_ENV; else echo "exists=false" >> $GITHUB_ENV; fi

      - name: Abort if .head file does not exist
        if: env.exists == 'false'
        run: echo "No .head file found, aborting operation." && exit 1

      - name: Insert or Update .head content in HTML files
        if: env.exists == 'true'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          START_COMMENT="" # If you want to use identifiable comments, define them here.
          END_COMMENT=""   # e.g., "<!-- My Head Content Start -->"

          CONTENT_RAW=$(cat .head | tr -d '\r')

          escape_backslashes() {
            echo "$1" | sed 's/\\/\\\\/g'
          }

          prepare_multiline_for_sed() {
            echo "$1" | sed -e 's/\\/\\\\/g' -e '$!s/$/\\/'
          }

          START_COMMENT_TEXT=$(escape_backslashes "$START_COMMENT")
          END_COMMENT_TEXT=$(escape_backslashes "$END_COMMENT")
          CONTENT_TEXT=$(prepare_multiline_for_sed "$CONTENT_RAW")

          find . -name '*.html' -print0 | while IFS= read -r -d $'\0' file; do
            echo "Processing $file..."
            
            # Only attempt to remove existing block if START_COMMENT and END_COMMENT are non-empty
            if [[ -n "$START_COMMENT" && -n "$END_COMMENT" ]]; then
              START_COMMENT_REGEX=$(echo "$START_COMMENT" | sed -e 's/[][\/.*^$]/\\&/g')
              END_COMMENT_REGEX=$(echo "$END_COMMENT" | sed -e 's/[][\/.*^$]/\\&/g')
              sed -i "/${START_COMMENT_REGEX}/,/${END_COMMENT_REGEX}/d" "$file"
            else
              echo "Skipping removal of existing block as START_COMMENT or END_COMMENT is empty."
            fi
            
            # Insert new content
            # If START_COMMENT_TEXT or END_COMMENT_TEXT are empty, they will just be empty lines in the sed command,
            # effectively inserting a blank line if that's the only content on its respective line in the sed 'i' block.
            # If CONTENT_RAW was empty, CONTENT_TEXT will be an empty string.
            
            # We only insert if there's *something* to insert (comments or content)
            if [[ -n "$START_COMMENT_TEXT" || -n "$CONTENT_TEXT" || -n "$END_COMMENT_TEXT" ]]; then
              if [[ -z "$CONTENT_RAW" ]]; then # .head was empty, CONTENT_TEXT is empty
                sed -i "/<\/head>/i \\
                  ${START_COMMENT_TEXT}\\
                  ${END_COMMENT_TEXT}" "$file"
              else # .head had content, CONTENT_TEXT is prepared
                sed -i "/<\/head>/i \\
                  ${START_COMMENT_TEXT}\\
                  ${CONTENT_TEXT}\\
                  ${END_COMMENT_TEXT}" "$file"
              fi
            else
              echo "Nothing to insert for $file (empty .head and no comments defined)."
            fi
          done
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if ! git diff --quiet; then
            echo "Changes detected, committing and pushing..."
            git add .
            git commit -m "Update .head content in HTML files (v2.2)" # Added version for clarity
            git remote set-url origin "https://x-access-token:${GH_PAT}@github.com/${GITHUB_REPOSITORY}"
            git push origin HEAD:${GITHUB_REF_NAME}
          else
            echo "No changes to commit."
          fi
